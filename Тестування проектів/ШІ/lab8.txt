public class MatrixFunc {

    double[][] data;
    int rows;
    int columns;

    public MatrixFunc(int rows, int columns) {

        data = new double[rows][columns];
        this.rows = rows;
        this.columns = columns;

        for(int i = 0; i < rows; i++) {

            for(int j = 0; j < columns; j++) {

                data[i][j] = Math.random()*2-1;
            }
        }
    }

    public void add(MatrixFunc m) {

        for(int i = 0; i < rows; i++) {

            for(int j = 0; j < columns; j++) {

                this.data[i][j] += m.data[i][j];
            }
        }
    }

    public static MatrixFunc subtract(MatrixFunc a, MatrixFunc b) {

        MatrixFunc temp = new MatrixFunc(a.rows, a.columns);

        for(int i = 0; i < a.rows; i++) {

            for(int j = 0; j < a.columns; j++) {

                temp.data[i][j] = a.data[i][j] - b.data[i][j];
            }
        }

        return temp;
    }

    public static MatrixFunc transpose(MatrixFunc a) {

        MatrixFunc temp = new MatrixFunc(a.columns, a.rows);

        for(int i = 0; i < a.rows; i++) {

            for(int j = 0; j < a.columns; j++) {

                temp.data[j][i] = a.data[i][j];
            }
        }

        return temp;
    }

    public static MatrixFunc multiply(MatrixFunc a, MatrixFunc b) {

        MatrixFunc temp = new MatrixFunc(a.rows, b.columns);

        for(int i = 0; i < temp.rows; i++) {

            for(int j = 0; j < temp.columns; j++) {

                double scalar = 0;

                for(int k = 0; k < a.columns; k++) {

                    scalar += a.data[i][k] * b.data[k][j];
                }

                temp.data[i][j] = scalar;
            }
        }

        return temp;
    }

    public void multiply(MatrixFunc a) {

        for(int i = 0; i < a.rows; i++) {

            for(int j = 0; j < a.columns; j++) {

                this.data[i][j] *= a.data[i][j];
            }
        }
    }

    public void multiply(double a) {

        for(int i = 0; i < rows; i++) {

            for(int j = 0; j < columns; j++) {

                this.data[i][j] *= a;
            }
        }
    }

    public void sigmoid() {

        for(int i = 0; i < rows; i++) {

            for(int j = 0; j < columns; j++) {

                this.data[i][j] = 1 / (1 + Math.exp(-this.data[i][j]));
            }
        }
    }

    public MatrixFunc dSigmoid() {

        MatrixFunc temp = new MatrixFunc(rows, columns);

        for(int i = 0; i < rows; i++) {

            for(int j = 0; j < columns; j++) {

                temp.data[i][j] = this.data[i][j] * (1 - this.data[i][j]);
            }
        }

        return temp;
    }

    public static MatrixFunc fromArray(double[]x)
    {

        MatrixFunc temp = new MatrixFunc(x.length,1);

        for(int i = 0; i < x.length; i++) {

            temp.data[i][0] = x[i];
        }
        return temp;

    }

    public List<Double> toArray() {
        List<Double> temp = new ArrayList<>();

        for (int i = 0; i < rows; i++) {

            for (int j = 0; j < columns; j++) {

                temp.add(data[i][j]);
            }
        }
        return temp;
    }
}

~~~~~~~~~~~~~

public class NeuralNet {

    MatrixFunc weightsIh;
    MatrixFunc weightsHo;
    MatrixFunc biasH;
    MatrixFunc biasO;
    double lRate = 0.01;


    public NeuralNet(int i, int h, int o) {

        weightsIh = new MatrixFunc(h,i);
        weightsHo = new MatrixFunc(o,h);

        biasH = new MatrixFunc(h,1);
        biasO = new MatrixFunc(o,1);

    }

    public List<Double> predict(double[] X) {

        MatrixFunc input = MatrixFunc.fromArray(X);
        MatrixFunc hidden = MatrixFunc.multiply(weightsIh, input);
        hidden.add(biasH);
        hidden.sigmoid();

        MatrixFunc output = MatrixFunc.multiply(weightsHo, hidden);
        output.add(biasO);
        output.sigmoid();

        return output.toArray();
    }

    public void train(double[] X, double[] Y) {

        MatrixFunc input = MatrixFunc.fromArray(X);
        MatrixFunc hidden = MatrixFunc.multiply(weightsIh, input);
        hidden.add(biasH);
        hidden.sigmoid();

        MatrixFunc output = MatrixFunc.multiply(weightsHo, hidden);
        output.add(biasO);
        output.sigmoid();

        MatrixFunc target = MatrixFunc.fromArray(Y);

        MatrixFunc error = MatrixFunc.subtract(target, output);
        MatrixFunc gradient = output.dSigmoid();
        gradient.multiply(error);
        gradient.multiply(lRate);

        MatrixFunc hiddenT = MatrixFunc.transpose(hidden);
        MatrixFunc whoDelta = MatrixFunc.multiply(gradient, hiddenT);

        weightsHo.add(whoDelta);
        biasO.add(gradient);

        MatrixFunc whoT = MatrixFunc.transpose(weightsHo);
        MatrixFunc hiddenErrors = MatrixFunc.multiply(whoT, error);

        MatrixFunc hGradient = hidden.dSigmoid();
        hGradient.multiply(hiddenErrors);
        hGradient.multiply(lRate);

        MatrixFunc iT = MatrixFunc.transpose(input);
        MatrixFunc wihDelta = MatrixFunc.multiply(hGradient, iT);

        weightsIh.add(wihDelta);
        biasH.add(hGradient);

    }

    public void fit(double[][] X, double[][] Y, int steps) {

        for (int i = 0; i < steps; i++) {

            int sampleN = (int) (Math.random() * X.length);
            this.train(X[sampleN], Y[sampleN]);
        }
    }
}

~~~~~~~~~~~~~~~~

public class Main {

    static double[][] X = {{0,0}, {1,0}, {0,1}, {1,1}};
    static double[][] Y = {{0},{1},{1},{0}};

    public static void main(String[] args) {

        NeuralNet neuralNet = new NeuralNet(2, 10, 1);
        neuralNet.fit(X, Y, 50000);

        String output;

        double[][] input = {{1,1},{1,0},{0,1},{1,1}};

        for(double[] d : input) {

            output = String.valueOf(neuralNet.predict(d));

            output = output.substring(0, Math.min(output.length(), 4));

            System.out.println(output + "]");
        }

    }
}
