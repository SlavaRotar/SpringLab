public class Individual {

    private int[] chromosome;
    private double fitness = -1;

    public Individual(int[] chromosome) {
        this.chromosome = chromosome;
    }

    public Individual(int chromosomeLength) {

        int[] individual;
        individual = new int[chromosomeLength];

        for (int gene = 0; gene < chromosomeLength; gene++) {
            individual[gene] = gene;
        }

        this.chromosome = individual;
    }

    public int[] getChromosome() {
        return this.chromosome;
    }

    public int getChromosomeLength() {
        return this.chromosome.length;
    }

    public void setGene(int offset, int gene) {
        this.chromosome[offset] = gene;
    }

    public int getGene(int offset) {
        return this.chromosome[offset];
    }

    public void setFitness(double fitness) {
        this.fitness = fitness;
    }

    public double getFitness() {
        return this.fitness;
    }

    public String toString() {
        String output = "";
        for (int gene = 0; gene < this.chromosome.length; gene++) {
            output += this.chromosome[gene] + ",";
        }
        return output;
    }

    public boolean containsGene(int gene) {

        for (int i = 0; i < this.chromosome.length; i++) {
            if (this.chromosome[i] == gene) {
                return true;
            }
        }
        return false;
    }
}

~~~~~~~~~~~~~~~~

public class Population {

    private Individual[] population;
    private double populationFitness = -1;

    public Population(int populationSize) {
        this.population = new Individual[populationSize];
    }

    public Population(int populationSize, int chromosomeLength) {

        this.population = new Individual[populationSize];

        for (int individualCount = 0; individualCount < populationSize; individualCount++) {

            Individual individual = new Individual(chromosomeLength);
            this.population[individualCount] = individual;
        }
    }

    public Individual[] getIndividuals() {
        return this.population;
    }

    public Individual getFittest(int offset) {

        Arrays.sort(this.population, (o1, o2) -> {
            if (o1.getFitness() > o2.getFitness()) {
                return -1;
            } else if (o1.getFitness() < o2.getFitness()) {
                return 1;
            }
            return 0;
        });

        return this.population[offset];
    }

    public void setPopulationFitness(double fitness) {
        this.populationFitness = fitness;
    }

    public double getPopulationFitness() {
        return this.populationFitness;
    }

    public int size() {
        return this.population.length;
    }

    public Individual setIndividual(int offset, Individual individual) {
        return population[offset] = individual;
    }

    public Individual getIndividual(int offset) {
        return population[offset];
    }

    public void populationMix() {

        Random rnd = new Random();

        for (int i = population.length - 1; i > 0; i--) {

            int index = rnd.nextInt(i + 1);
            Individual a = population[index];

            population[index] = population[i];
            population[i] = a;
        }
    }
}

~~~~~~~~~~~~~~

public class City {

    private int x;
    private int y;

    public City(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public double distanceFrom(City city) {

        double deltaXSq = Math.pow((city.getX() - this.getX()), 2);
        double deltaYSq = Math.pow((city.getY() - this.getY()), 2);

        return Math.sqrt(Math.abs(deltaXSq + deltaYSq));
    }

    public int getX() {
        return this.x;
    }

    public int getY() {
        return this.y;
    }
}

~~~~~~~~~~~~~~~~~~

public class Route {

    private final City[] route;
    private double distance = 0;

    public Route(Individual individual, City[] cities) {

        int[] chromosome = individual.getChromosome();

        this.route = new City[cities.length];

        for (int geneIndex = 0; geneIndex < chromosome.length; geneIndex++) {

            this.route[geneIndex] = cities[chromosome[geneIndex]];
        }
    }

    public double getDistance() {

        if (this.distance > 0) {
            return this.distance;
        }

        double totalDistance = 0;

        for (int cityIndex = 0; cityIndex + 1 < this.route.length; cityIndex++) {

            totalDistance += this.route[cityIndex].distanceFrom(this.route[cityIndex + 1]);
        }

        totalDistance += this.route[this.route.length - 1].distanceFrom(this.route[0]);
        this.distance = totalDistance;

        return totalDistance;
    }
}

~~~~~~~~~~~~~~~~~~

public class GeneticAlgorithm {

    private int populationSize;
    private double mutationRate;
    private double crossoverRate;
    private int elitismCount;
    protected int tournamentSize;

    public GeneticAlgorithm(int populationSize,
                            double mutationRate,
                            double crossoverRate,
                            int elitismCount,
                            int tournamentSize) {

        this.populationSize = populationSize;
        this.mutationRate = mutationRate;
        this.crossoverRate = crossoverRate;
        this.elitismCount = elitismCount;
        this.tournamentSize = tournamentSize;
    }

    public Population initPopulation(int chromosomeLength){
        return new Population(this.populationSize, chromosomeLength);
    }

    public boolean isTerminationConditionMet(int generationsCount, int maxGenerations) {
        return (generationsCount > maxGenerations);
    }

    public double calcFitness(Individual individual, City[] cities){

        Route route = new Route(individual, cities);
        double fitness = 1 / route.getDistance();

        individual.setFitness(fitness);

        return fitness;
    }

    public void evalPopulation(Population population, City[] cities){

        double populationFitness = 0;

        for (Individual individual : population.getIndividuals()) {
            populationFitness += this.calcFitness(individual, cities);
        }

        double avgFitness = populationFitness / population.size();
        population.setPopulationFitness(avgFitness);
    }

    public Individual selectParent(Population population) {

        Population tournament = new Population(this.tournamentSize);

        population.populationMix();

        for (int i = 0; i < this.tournamentSize; i++) {

            Individual tournamentIndividual = population.getIndividual(i);
            tournament.setIndividual(i, tournamentIndividual);
        }

        return tournament.getFittest(0);
    }

    public Population crossoverPopulation(Population population){

        Population newPopulation = new Population(population.size());

        for (int populationIndex = 0; populationIndex < population.size(); populationIndex++) {
            Individual parent1 = population.getFittest(populationIndex);

            if (this.crossoverRate > Math.random() && populationIndex >= this.elitismCount) {

                Individual parent2 = this.selectParent(population);

                int[] offspringChromosome = new int[parent1.getChromosomeLength()];
                Arrays.fill(offspringChromosome, -1);
                Individual offspring = new Individual(offspringChromosome);

                int substrPos1 = (int) (Math.random() * parent1.getChromosomeLength());
                int substrPos2 = (int) (Math.random() * parent1.getChromosomeLength());

                final int startSubstr = Math.min(substrPos1, substrPos2);
                final int endSubstr = Math.max(substrPos1, substrPos2);

                for (int i = startSubstr; i < endSubstr; i++) {
                    offspring.setGene(i, parent1.getGene(i));
                }

                for (int i = 0; i < parent2.getChromosomeLength(); i++) {
                    int parent2Gene = i + endSubstr;
                    if (parent2Gene >= parent2.getChromosomeLength()) {
                        parent2Gene -= parent2.getChromosomeLength();
                    }

                    if (!offspring.containsGene(parent2.getGene(parent2Gene))) {
                        for (int j = 0; j < offspring.getChromosomeLength(); j++) {
                            if (offspring.getGene(j) == -1) {
                                offspring.setGene(j, parent2.getGene(parent2Gene));
                                break;
                            }
                        }
                    }
                }
                newPopulation.setIndividual(populationIndex, offspring);

            } else {
                newPopulation.setIndividual(populationIndex, parent1);
            }
        }
        return newPopulation;
    }

    public Population mutatePopulation(Population population){

        Population newPopulation = new Population(this.populationSize);

        for (int populationIndex = 0; populationIndex < population.size(); populationIndex++) {
            Individual individual = population.getFittest(populationIndex);

            if (populationIndex >= this.elitismCount) {

                for (int geneIndex = 0; geneIndex < individual.getChromosomeLength(); geneIndex++) {

                    if (this.mutationRate > Math.random()) {

                        int newGenePos = (int) (Math.random() * individual.getChromosomeLength());

                        int gene1 = individual.getGene(newGenePos);
                        int gene2 = individual.getGene(geneIndex);

                        individual.setGene(geneIndex, gene1);
                        individual.setGene(newGenePos, gene2);
                    }
                }
            }

            newPopulation.setIndividual(populationIndex, individual);
        }
        return newPopulation;
    }
}

~~~~~~~~~~~~~~~~~~

public class Main {

    //private static final int population = 100;
    public static int maxGenerations = 20;

 public static void main(String[] args) {

     DecimalFormat df = new DecimalFormat("#.##");

     int numCities = 10;
     City[] cities = new City[numCities];

     for (int cityIndex = 0; cityIndex < numCities; cityIndex++) {
         int xPos = (int) (10 * Math.random());
         int yPos = (int) (10 * Math.random());

         cities[cityIndex] = new City(xPos, yPos);
     }

     GeneticAlgorithm ga = new GeneticAlgorithm(100, 0.001,
             0.9, 2, 5);

     Population population = ga.initPopulation(cities.length);

     ga.evalPopulation(population, cities);

     int generation = 1;

     while (!ga.isTerminationConditionMet(generation, maxGenerations)) {

         Route route = new Route(population.getFittest(0), cities);
         System.out.println("Distance: " + df.format(route.getDistance()) + " -- " + generation);
         //System.out.println("Distance: " + route.getDistance() + " -- " + generation);

         population = ga.crossoverPopulation(population);

         population = ga.mutatePopulation(population);

         ga.evalPopulation(population, cities);

         generation++;
     }

     Route route = new Route(population.getFittest(0), cities);
     System.out.println("Best distance: " + df.format(route.getDistance()) + " with generation " + maxGenerations);
    }
}